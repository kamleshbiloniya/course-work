#include <iostream>
#include<stdio.h>
#include<string.h>
#include <vector>
#include <string>
#include <cctype>
using namespace std;

struct property{
    int childs;
    string x;
    struct property *left;
     struct property *right;
     struct property *parent;
     // struct property *tree;
};
typedef struct property prop;
prop *root;
// void AddtoRight(prop*node ,prop *tree){
//     tree->childs+=1;
//
//     else if(s.compare(tree->right)>0){
//         AddtoRight(s,tree->right);
//     }
//     else{
//         AddtoLeft(s,tree->right);
//     }
// }
void deleteNode(string s,prop *tree) {
  if(s.compare(tree->x)==0){    // replacement search start
    prop *fix=tree;
    if(tree->right==NULL && tree->left !=NULL){
      tree->childs -=1;
      tree=tree->left;
      if(tree->right==NULL){
        if(tree->left!=NULL){
          tree->parent->left=tree->left;
          tree->left->parent=tree->parent;
        }
        else{
          tree->parent->left=NULL;
        }
      }
      while(tree->right!=NULL){
        tree=tree->right;
      }
      else if(tree->left==NULL){
        tree->left=fix->left;
        tree->childs=fix->childs;
        tree->parent->right=NULL;
        tree->parent=fix->parent;
	
      }
      else{
        tree->parent->right=tree->left;
        tree->left->parent=tree->parent;
        tree->left=fix->left;
        tree->childs=fix->childs;
        tree->parent->right=NULL;
        tree->parent=fix->parent;
      }
    }
  else  if( tree->right !=NULL){
      tree=tree->right;
      if(tree->left==NULL){
        if(tree->right!=NULL){
          tree->right->parent=tree->parent;
          tree->parent->right=tree->right;
        }
        else{
          tree->parent->right=NULL;
        }
      }
      while(tree->left !=NULL){
        tree->childs -=1;
        tree=tree->left;
      }
      else if(tree->right==NULL){
        tree->parent->left=NULL;
        tree->right=fix->right;
        tree->childs=fix->childs;
        tree->parent=fix->parent;
      }
      else{
        tree->right->parent=tree->parent;
        tree->parent->left=tree->right;
        tree->parent->left=NULL;
        tree->right=fix->right;
        tree->childs=fix->childs;
        tree->parent=fix->parent;
      }
    }

    else{
      if(tree==tree->parent->left){
        tree->parent->childs -=1;
        tree->parent->left=NULL;
      }
      else{
        tree->parent->right=NULL;
      }
    }

  } // root found in search
  else if(s.compare(tree->x)<0){ //go left
    tree->childs -=1;
    deleteNode(s,tree->left);
  }
  else{                                           //go right
      deleteNode(s,tree->right);
  }
}                               //function ends
int findRank(string s,prop*tree){

    if(s.compare(tree->x)==0)return tree->childs;
    else if(s.compare(tree->x)<0){
      return findRank(s,tree->left);
    }
    else{
      return tree->childs+findRank(s,tree->right);
    }
}

void Add(prop *node ,prop*tree){
    tree->childs+=1;

    if((node->x).compare(tree->x)<0){
          if(tree->left==NULL)  {
            tree->left=node;
            node->parent=tree;
          }

      else  {
        tree->childs+=1;
        Add(node,tree->left);
              }
    }
    else{
      if(tree->right==NULL){
        tree->right=node;
        node->parent=tree;
          tree->right->childs=1;
      }
      else  Add(node,tree->right);
    }
}
void insert(string s){
    prop *new_node=(prop*)malloc(sizeof(prop));
    //prop *tree=(prop*)malloc(sizeof(prop));
    new_node->x=s;
    new_node->childs=0;
    new_node->left=NULL;
    new_node->right=NULL;
    new_node->parent=NULL;
    prop *tree=root;
  //  tree->childs+=1;
    if(tree->childs==0){
        tree->childs=1;
        tree->x=s;
        tree->left=NULL;
        tree->right=NULL;
        tree->parent=NULL;
    }
    else{

        if((new_node->x).compare(tree->x)<0){
          tree->childs+=1;
          if(tree->left==NULL) {
             tree->left=new_node;
             new_node->parent=tree;
           }
          else  Add(new_node,tree->left);
        }
        else{
          if(tree->right==NULL){
            tree->right=new_node;
            new_node->parent=tree;
            tree->right->childs=1;
          }
          else  Add(new_node,tree->right);
        }
    }
}


int main(){
root=(prop*)malloc(sizeof(prop));
root->childs=0;
//root->x = NULL;
int n;
 cin>>n;
 for (int i=0; i<n; i++){
     string s1,s2;
     cin>>s1>>s2;

    if(s1[0]==108){
        insert(s2);

    }
    if(s1[1]==105){
        prop *tree=root;
    cout<<findRank(s2,tree)<<endl;
  }
    if(s1[1]==111){
      prop *tree=root;
      deleteNode(s2,tree);
    }


 }
cout<<root->left->left->childs<<endl;
	return 0;
}

